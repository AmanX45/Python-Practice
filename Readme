# 🐍 Python Fundamentals Practice

This repository contains my personal practice of Python basics, as part of a complete refresh of core programming concepts. These fundamentals are essential for AI, Machine Learning, and interview preparation.

The goal is to keep my Python logic sharp and interview-ready by solving mini problems, writing concept-based code, and reinforcing syntax through hands-on practice.

---

## 📘 Topics Covered Day 1 ________

Below is a breakdown of each topic with a short description:

### ✅ Character Set
Understanding the set of characters recognized by Python (based on Unicode), essential for string processing and internationalization.

### ✅ Identifiers
Rules for naming variables, functions, and classes — case sensitivity, allowed characters, and naming best practices.

### ✅ Variables
How to declare, assign, and update variables dynamically in Python.

### ✅ Keywords
Reserved words in Python that cannot be used as identifiers. Examples: `if`, `else`, `class`, `def`, etc.

### ✅ Data Types
Common built-in data types like:
- `int`, `float`, `str`, `bool`
- `list`, `tuple`, `set`, `dict`

### ✅ Operators
Arithmetic, assignment, comparison, logical, bitwise, membership, and identity operators used to perform operations on data.

### ✅ Type Casting
Manually converting between data types using functions like `int()`, `float()`, `str()`, etc.

### ✅ Input
Taking user input via the `input()` function and handling it safely.

### ✅ Type Conversion
Automatic or manual conversion between compatible data types during expressions or operations.

### ✅ Strings
Declaring strings, using quotes, multi-line strings, and working with characters.

### ✅ Escape Sequence Characters
Special characters like `\n`, `\t`, `\\`, `\"` that help format or include special characters inside strings.

### ✅ String Concatenation
Joining strings using the `+` operator and formatting them using `f-strings`, `format()`, etc.

### ✅ Indexing
Accessing specific characters from strings using zero-based indexing.

### ✅ Length of String
Using `len()` to find the total number of characters in a string.

### ✅ String Slicing (incl. Negative Slicing)
Extracting substrings using `[start:stop:step]` and slicing with negative indices.

### ✅ String Functions
Common built-in methods like `upper()`, `lower()`, `replace()`, `find()`, `split()`, etc.

### ✅ Conditional Statements
Using `if`, `elif`, and `else` to make decisions based on conditions.

### ✅ Nested If
Multiple `if` conditions placed inside each other for complex decision-making.

### ✅ Lists and Tuples
- **List**: mutable, ordered collection with methods like `append()`, `extend()`, `sort()`
- **Tuple**: immutable version of a list

------------------------------------------------------------------------------------------------


📘 Day 2: Python Practice – Dictionaries & Sets
📌 Description
This repository contains my Day 2 Python practice, focused on mastering:

✅ Dictionaries – key-value pairs for storing structured data

✅ Nested Dictionaries – dictionaries within dictionaries

✅ Dictionary Methods – like .get(), .keys(), .items(), .update(), .pop()

✅ Sets – unordered collections of unique elements

✅ Empty Set – created using set()

✅ Set Methods – like .add(), .remove(), .union(), .intersection(), etc.

🔹 Code files are included for each topic with practical examples.
🔹 I’ve also shared a learning update on LinkedIn to track my progress and connect with the tech community.




# 📅 Day 3 – Python Loops: while loop, Infinite Loops, break & continue, Mini Projects

Continuing my Python journey, today I focused on one of the core concepts of programming — **loops**, specifically the `while` loop. I explored how loops work under the hood, how dangerous infinite loops can be if not controlled, and how to use `break` and `continue` to manage loop behavior effectively.

To apply these concepts, I also built some **mini-projects** that simulate real-world logic, like ATM menus, number games, and login systems — all based on loops.

---

## 🧠 What I Learned

### 🔁 `while` Loop
Used when the number of iterations is not known in advance. The loop keeps running as long as the condition is `True`.

```python
i = 0
while i < 5:
    print("i is", i)
    i += 1
______________________________________
# infinite loop
while True:
    print("This runs forever unless we break it.")
______________________________________

# break 
i = 1
while i <= 10:
    if i == 5:
        break
    print(i)
    i += 1
______________________________________
i = 0
while i < 5:
    i += 1
    if i == 3:
        continue
    print(i)


______________________________________


# **📒Day 4 – Python Practice**

### **Topics Learned Today**

---

## **1. for loop**

A `for` loop in Python is used to repeat a block of code multiple times by iterating over a sequence such as a list, tuple, string, dictionary, or any other iterable object.
It automatically goes through each item in the sequence one by one, making it useful for tasks like processing items in a list, printing values, or performing calculations on a range of numbers.

---

## **2. range() function**

The `range()` function is often used with `for` loops to generate a sequence of numbers.
It can take up to three arguments:

* **start** → The first number of the sequence (default is 0).
* **stop** → The point where the sequence ends (this number is not included).
* **step** → The difference between each number in the sequence (default is 1).

It is commonly used when you know how many times you want the loop to run or when you need a numerical sequence to work with.

---

## **3. pass statement**

The `pass` statement is a placeholder in Python.
It does nothing when executed, but it allows the code to remain syntactically correct.
It is often used when writing code that you plan to complete later, or when you need an empty block (for example, inside a loop, function, or class) without causing an error.

---

### **Famous Projects Using These Topics**

* **Number Guessing Game** – Continues looping until the correct guess is made.
* **Multiplication Table Generator** – Uses loops and ranges to create tables dynamically.
* **Pattern Printing** – Uses nested loops for patterns like pyramids or stars.
* **To-Do List CLI** – Displays tasks in a loop, with `pass` for features to be added later.
* **Prime Number Checker** – Iterates over a range to identify prime numbers.

____________________________________________________________________________________________\

## 📘 Topics Covered Day 5 ________
## 📘 Topics Covered Day 6 ________
## 📘 Topics Covered Day 7 ________

## 🧠 Why This Repo?

I'm building this as part of my journey into AI & Machine Learning. Having strong Python fundamentals helps with model implementation, data handling, and debugging complex logic.

---

## 📌 Usage

Feel free to explore, fork, or use these examples for your own revision:
```bash
# Run any script
python topic_name.py

